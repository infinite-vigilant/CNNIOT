// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Axi_Transfer_HH_
#define _Axi_Transfer_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Axi_Transfer : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_data_TDATA;
    sc_in< sc_logic > in_data_TVALID;
    sc_out< sc_logic > in_data_TREADY;
    sc_in< sc_lv<4> > in_data_TKEEP;
    sc_in< sc_lv<4> > in_data_TSTRB;
    sc_in< sc_lv<1> > in_data_TUSER;
    sc_in< sc_lv<1> > in_data_TLAST;
    sc_in< sc_lv<1> > in_data_TID;
    sc_in< sc_lv<1> > in_data_TDEST;
    sc_out< sc_lv<32> > out_data_TDATA;
    sc_out< sc_logic > out_data_TVALID;
    sc_in< sc_logic > out_data_TREADY;
    sc_out< sc_lv<4> > out_data_TKEEP;
    sc_out< sc_lv<4> > out_data_TSTRB;
    sc_out< sc_lv<1> > out_data_TUSER;
    sc_out< sc_lv<1> > out_data_TLAST;
    sc_out< sc_lv<1> > out_data_TID;
    sc_out< sc_lv<1> > out_data_TDEST;
    sc_in< sc_lv<32> > value_r;
    sc_in< sc_lv<1> > loop_r;
    sc_out< sc_lv<32> > ap_return;
    sc_out< sc_logic > in_data_TDATA_blk_n;
    sc_out< sc_logic > out_data_TDATA_blk_n;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    Axi_Transfer(sc_module_name name);
    SC_HAS_PROCESS(Axi_Transfer);

    ~Axi_Transfer();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_sig_ioackin_out_data_TREADY;
    sc_signal< sc_logic > ap_reg_ioackin_out_data_TREADY;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_156;
    sc_signal< bool > ap_condition_51;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_condition_156();
    void thread_ap_condition_51();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_ioackin_out_data_TREADY();
    void thread_in_data_TDATA_blk_n();
    void thread_in_data_TREADY();
    void thread_out_data_TDATA();
    void thread_out_data_TDATA_blk_n();
    void thread_out_data_TDEST();
    void thread_out_data_TID();
    void thread_out_data_TKEEP();
    void thread_out_data_TLAST();
    void thread_out_data_TSTRB();
    void thread_out_data_TUSER();
    void thread_out_data_TVALID();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
