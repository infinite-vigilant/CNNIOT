// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Axi_Transfer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Axi_Transfer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Axi_Transfer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Axi_Transfer::ap_ST_fsm_state1 = "1";
const sc_lv<32> Axi_Transfer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Axi_Transfer::ap_const_boolean_1 = true;

Axi_Transfer::Axi_Transfer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_ap_condition_156);
    sensitive << ( ap_start );
    sensitive << ( in_data_TVALID );
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_ap_condition_51);
    sensitive << ( ap_start );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TDATA );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_sig_ioackin_out_data_TREADY);
    sensitive << ( out_data_TREADY );
    sensitive << ( ap_reg_ioackin_out_data_TREADY );

    SC_METHOD(thread_in_data_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TDATA);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TDATA );
    sensitive << ( in_data_TVALID );
    sensitive << ( value_r );
    sensitive << ( loop_r );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_TDEST);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TDEST );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TID );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TKEEP);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TKEEP );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TLAST);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TLAST );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TSTRB);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TSTRB );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TUSER);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TUSER );
    sensitive << ( ap_ce );

    SC_METHOD(thread_out_data_TVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ioackin_out_data_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );
    sensitive << ( ap_ce );

    ap_CS_fsm = "1";
    ap_reg_ioackin_out_data_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Axi_Transfer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_data_TDATA, "(port)in_data_TDATA");
    sc_trace(mVcdFile, in_data_TVALID, "(port)in_data_TVALID");
    sc_trace(mVcdFile, in_data_TREADY, "(port)in_data_TREADY");
    sc_trace(mVcdFile, in_data_TKEEP, "(port)in_data_TKEEP");
    sc_trace(mVcdFile, in_data_TSTRB, "(port)in_data_TSTRB");
    sc_trace(mVcdFile, in_data_TUSER, "(port)in_data_TUSER");
    sc_trace(mVcdFile, in_data_TLAST, "(port)in_data_TLAST");
    sc_trace(mVcdFile, in_data_TID, "(port)in_data_TID");
    sc_trace(mVcdFile, in_data_TDEST, "(port)in_data_TDEST");
    sc_trace(mVcdFile, out_data_TDATA, "(port)out_data_TDATA");
    sc_trace(mVcdFile, out_data_TVALID, "(port)out_data_TVALID");
    sc_trace(mVcdFile, out_data_TREADY, "(port)out_data_TREADY");
    sc_trace(mVcdFile, out_data_TKEEP, "(port)out_data_TKEEP");
    sc_trace(mVcdFile, out_data_TSTRB, "(port)out_data_TSTRB");
    sc_trace(mVcdFile, out_data_TUSER, "(port)out_data_TUSER");
    sc_trace(mVcdFile, out_data_TLAST, "(port)out_data_TLAST");
    sc_trace(mVcdFile, out_data_TID, "(port)out_data_TID");
    sc_trace(mVcdFile, out_data_TDEST, "(port)out_data_TDEST");
    sc_trace(mVcdFile, value_r, "(port)value_r");
    sc_trace(mVcdFile, loop_r, "(port)loop_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, in_data_TDATA_blk_n, "(port)in_data_TDATA_blk_n");
    sc_trace(mVcdFile, out_data_TDATA_blk_n, "(port)out_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_sig_ioackin_out_data_TREADY, "ap_sig_ioackin_out_data_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_out_data_TREADY, "ap_reg_ioackin_out_data_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_156, "ap_condition_156");
    sc_trace(mVcdFile, ap_condition_51, "ap_condition_51");
#endif

    }
}

Axi_Transfer::~Axi_Transfer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Axi_Transfer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_out_data_TREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
            if (esl_seteq<1,1,1>(ap_condition_51.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_out_data_TREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_condition_156.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_out_data_TREADY = ap_const_logic_1;
            }
        }
    }
}

void Axi_Transfer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Axi_Transfer::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read()));
}

void Axi_Transfer::thread_ap_condition_156() {
    ap_condition_156 = (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_TREADY.read()));
}

void Axi_Transfer::thread_ap_condition_51() {
    ap_condition_51 = !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read()));
}

void Axi_Transfer::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read())) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Axi_Transfer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Axi_Transfer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Axi_Transfer::thread_ap_return() {
    ap_return = in_data_TDATA.read();
}

void Axi_Transfer::thread_ap_sig_ioackin_out_data_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_data_TREADY.read())) {
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY.read();
    } else {
        ap_sig_ioackin_out_data_TREADY = ap_const_logic_1;
    }
}

void Axi_Transfer::thread_in_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_data_TDATA_blk_n = in_data_TVALID.read();
    } else {
        in_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void Axi_Transfer::thread_in_data_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        in_data_TREADY = ap_const_logic_1;
    } else {
        in_data_TREADY = ap_const_logic_0;
    }
}

void Axi_Transfer::thread_out_data_TDATA() {
    out_data_TDATA = (!loop_r.read()[0].is_01())? sc_lv<32>(): ((loop_r.read()[0].to_bool())? in_data_TDATA.read(): value_r.read());
}

void Axi_Transfer::thread_out_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        out_data_TDATA_blk_n = out_data_TREADY.read();
    } else {
        out_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void Axi_Transfer::thread_out_data_TDEST() {
    out_data_TDEST = in_data_TDEST.read();
}

void Axi_Transfer::thread_out_data_TID() {
    out_data_TID = in_data_TID.read();
}

void Axi_Transfer::thread_out_data_TKEEP() {
    out_data_TKEEP = in_data_TKEEP.read();
}

void Axi_Transfer::thread_out_data_TLAST() {
    out_data_TLAST = in_data_TLAST.read();
}

void Axi_Transfer::thread_out_data_TSTRB() {
    out_data_TSTRB = in_data_TSTRB.read();
}

void Axi_Transfer::thread_out_data_TUSER() {
    out_data_TUSER = in_data_TUSER.read();
}

void Axi_Transfer::thread_out_data_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_data_TVALID.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_data_TREADY.read()))) {
        out_data_TVALID = ap_const_logic_1;
    } else {
        out_data_TVALID = ap_const_logic_0;
    }
}

void Axi_Transfer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

