-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Axi_Transfer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    value_r : IN STD_LOGIC_VECTOR (31 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_TDATA_blk_n : OUT STD_LOGIC;
    out_data_TDATA_blk_n : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Axi_Transfer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_sig_ioackin_out_data_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_out_data_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_156 : BOOLEAN;
    signal ap_condition_51 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_data_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ap_const_boolean_1 = ap_condition_51)) then 
                        ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_condition_156)) then 
                        ap_reg_ioackin_out_data_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_data_TVALID, ap_sig_ioackin_out_data_TREADY, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, in_data_TVALID)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0));
    end process;


    ap_condition_156_assign_proc : process(ap_start, in_data_TVALID, out_data_TREADY)
    begin
                ap_condition_156 <= (not(((ap_start = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0))) and (out_data_TREADY = ap_const_logic_1));
    end process;


    ap_condition_51_assign_proc : process(ap_start, in_data_TVALID, ap_sig_ioackin_out_data_TREADY)
    begin
                ap_condition_51 <= not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_out_data_TREADY = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, in_data_TVALID, ap_sig_ioackin_out_data_TREADY, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_out_data_TREADY = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, in_data_TVALID, ap_sig_ioackin_out_data_TREADY, ap_ce)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_out_data_TREADY = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= in_data_TDATA;

    ap_sig_ioackin_out_data_TREADY_assign_proc : process(out_data_TREADY, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((ap_reg_ioackin_out_data_TREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_out_data_TREADY <= out_data_TREADY;
        else 
            ap_sig_ioackin_out_data_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_data_TVALID)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_data_TDATA_blk_n <= in_data_TVALID;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, in_data_TVALID, ap_sig_ioackin_out_data_TREADY, ap_ce)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_out_data_TREADY = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_data_TREADY <= ap_const_logic_1;
        else 
            in_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    out_data_TDATA <= 
        in_data_TDATA when (loop_r(0) = '1') else 
        value_r;

    out_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, out_data_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            out_data_TDATA_blk_n <= out_data_TREADY;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDEST <= in_data_TDEST;
    out_data_TID <= in_data_TID;
    out_data_TKEEP <= in_data_TKEEP;
    out_data_TLAST <= in_data_TLAST;
    out_data_TSTRB <= in_data_TSTRB;
    out_data_TUSER <= in_data_TUSER;

    out_data_TVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, in_data_TVALID, ap_ce, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (in_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_reg_ioackin_out_data_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_data_TVALID <= ap_const_logic_1;
        else 
            out_data_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
