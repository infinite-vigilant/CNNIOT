// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Axi_Transfer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST,
        value_r,
        loop_r,
        ap_return,
        in_data_TDATA_blk_n,
        out_data_TDATA_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [3:0] in_data_TKEEP;
input  [3:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;
input  [31:0] value_r;
input  [0:0] loop_r;
output  [31:0] ap_return;
output   in_data_TDATA_blk_n;
output   out_data_TDATA_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_data_TREADY;
reg out_data_TVALID;
reg in_data_TDATA_blk_n;
reg out_data_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg    ap_sig_ioackin_out_data_TREADY;
reg    ap_reg_ioackin_out_data_TREADY;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_156;
reg    ap_condition_51;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_reg_ioackin_out_data_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_out_data_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((1'b1 == ap_condition_51)) begin
                ap_reg_ioackin_out_data_TREADY <= 1'b0;
            end else if ((1'b1 == ap_condition_156)) begin
                ap_reg_ioackin_out_data_TREADY <= 1'b1;
            end
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_out_data_TREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_sig_ioackin_out_data_TREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_data_TREADY == 1'b0)) begin
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY;
    end else begin
        ap_sig_ioackin_out_data_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_data_TDATA_blk_n = in_data_TVALID;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_sig_ioackin_out_data_TREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        out_data_TDATA_blk_n = out_data_TREADY;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_ce) & (ap_reg_ioackin_out_data_TREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_data_TVALID = 1'b1;
    end else begin
        out_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (in_data_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_156 = (~((ap_start == 1'b0) | (in_data_TVALID == 1'b0)) & (out_data_TREADY == 1'b1));
end

always @ (*) begin
    ap_condition_51 = ~((ap_start == 1'b0) | (ap_sig_ioackin_out_data_TREADY == 1'b0) | (in_data_TVALID == 1'b0));
end

assign ap_return = in_data_TDATA;

assign out_data_TDATA = ((loop_r[0:0] === 1'b1) ? in_data_TDATA : value_r);

assign out_data_TDEST = in_data_TDEST;

assign out_data_TID = in_data_TID;

assign out_data_TKEEP = in_data_TKEEP;

assign out_data_TLAST = in_data_TLAST;

assign out_data_TSTRB = in_data_TSTRB;

assign out_data_TUSER = in_data_TUSER;

endmodule //Axi_Transfer
